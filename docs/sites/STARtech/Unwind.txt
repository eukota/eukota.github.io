import java.applet.*;import java.awt.*;public class Unwind extends Applet {	int AMOUNT = 72;//declare number of circles	double[][] points = new double[AMOUNT][7];	int[] order = new int[AMOUNT];	int i,a,x,d,oldx,oldy,dx,dy,curw,curh,t,j,p,h,f,r,y,s,da,dp,dd;	double b,c,m,an,w;	boolean mouse = false;	boolean norun = true;	Image buffer;		public void init() {		resize(400,200);		Font myfont = new Font("Geneva", Font.PLAIN, 24);		setFont(myfont);		//points[][0] = x coords (-100 to 100);		//points[][1] = y coords (-100 to 100);		//points[][2] = z coords (-100 to 100);		//points[][3] = red (50 to 205, 0 for none);		//points[][4] = green (50 to 205, 0 for none);		//points[][5] = blue (50 to 205, 0 for none);		//points[][6] = diameter;		for (i=0;i<=23;i++) {			points[i][3] = 200;			points[i][4] = 0;			points[i][5] = 0;			points[i][6] = 22;		}		for (i=24;i<=47;i++) {			points[i][3] = 0;			points[i][4] = 0;			points[i][5] = 200;			points[i][6] = 18;		}		for (i=48;i<=71;i++) {			a = (int)(4*Math.random());			if (a==0) {				points[i][3] = 100;				points[i][4] = 100;				points[i][5] = 0;			}			if (a==1) {				points[i][3] = 0;				points[i][4] = 100;				points[i][5] = 0;			}			if (a==2) {				points[i][3] = 0;				points[i][4] = 100;				points[i][5] = 100;			}			if (a==3) {				points[i][3] = 100;				points[i][4] = 0;				points[i][5] = 100;			}			points[i][6] = 18;			i++;			a = 3 - a;			if (a==0) {				points[i][3] = 100;				points[i][4] = 100;				points[i][5] = 0;			}			if (a==1) {				points[i][3] = 0;				points[i][4] = 100;				points[i][5] = 0;			}			if (a==2) {				points[i][3] = 0;				points[i][4] = 100;				points[i][5] = 100;			}			if (a==3) {				points[i][3] = 100;				points[i][4] = 0;				points[i][5] = 100;			}			points[i][6] = 18;		}		for (i=3;i<=5;i++) {			points[64][i] = points[54][i];			points[65][i] = points[56][i];			points[70][i] = points[55][i];			points[71][i] = points[57][i];		}	}		public void paint(Graphics g) {		if (!mouse) {			g.drawString("Click to start the animation",10,100);			return;		}		for (i=0;i<AMOUNT;i++) {			order[i] = -200;		}		for (i=0;i<AMOUNT;i++) {			x = 0;			for (a=0;a<AMOUNT;a++) {				if (points[i][2]>points[a][2]) {					x++;				}			}			for (x=x;order[x]!=-200;x++) {			}			order[x] = i;		}		for (i=0;i<AMOUNT;i++) {			if (points[order[i]][3]!=0) {				a = (int)(points[order[i]][3]+(points[order[i]][2]/2));				if (a>255) {					a = 255;				}			} else {				a = 0;			}			if (points[order[i]][4]!=0) {				p = (int)(points[order[i]][4]+(points[order[i]][2]/2));				if (p>255) {					p = 255;				}			} else {				p = 0;			}			if (points[order[i]][5]!=0) {				d = (int)(points[order[i]][5]+(points[order[i]][2]/2));				if (d>255) {					d = 255;				}			} else {				d = 0;			}			w = (points[order[i]][2]+1000)/1000;			da = 255 - a;			dp = 255 - p;			dd = 255 - d;			s = (int)(points[order[i]][6]*w);			for (t=8;t>=1;t--) {				a = (int)(255 - (da*t/8));				p = (int)(255 - (dp*t/8));				d = (int)(255 - (dd*t/8));				g.setColor(new Color(a,p,d));				x = (int) (w*(points[order[i]][0])+200-(int)(s/2)+((8-t)*s/32));				y = (int) (w*(points[order[i]][1])+100-(int)(s/2)+((8-t)*s/32));				g.fillOval(x,y,t*s/8,t*s/8);			}		}	}		public boolean mouseDown(Event e, int x, int y) {		oldx = x;		oldy = y;		return true;	}		public boolean mouseDrag(Event e, int x, int y) {		dx = x - oldx;		dy = y - oldy;		for (i=0;i<AMOUNT;i++) {			b = points[i][0];			c = points[i][2];			if (c!=0) {				an = 180/Math.PI*(Math.atan(b/c));				if (an==0) {					if (c<0) {						an = 180;					}				}				if (b<0) {					if (c>=0) {						an = an + 360;					} else {						an = an + 180;					}				}				if (c<0) {					if (b>0) {						an = an + 180;					}				}			} else {				if (b>0) {					an = 90;				} else {					an = 270;				}			}			m = Math.sqrt((b*b)+(c*c));			an = an + dx;			b = m*(Math.sin(an/180*Math.PI));			c = m*(Math.cos(an/180*Math.PI));			points[i][0] = b;			points[i][2] = c;		}		for (i=0;i<AMOUNT;i++) {			b = points[i][1];			c = points[i][2];			if (c!=0) {				an = 180/Math.PI*(Math.atan(b/c));				if (an==0) {					if (c<0) {						an = 180;					}				}				if (b<0) {					if (c>=0) {						an = an + 360;					} else {						an = an + 180;					}				}				if (c<0) {					if (b>0) {						an = an + 180;					}				}			} else {				if (b>0) {					an = 90;				} else {					an = 270;				}			}			m = Math.sqrt((b*b)+(c*c));			an = an + dy;			b = m*(Math.sin(an/180*Math.PI));			c = m*(Math.cos(an/180*Math.PI));			points[i][1] = b;			points[i][2] = c;		}		oldx = x;		oldy = y;		if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {			buffer = createImage(size().width, size().height);		}		Graphics g = buffer.getGraphics();		update(g);		g = getGraphics();		g.drawImage(buffer,0,0,this);		return true;	}		public boolean mouseUp (Event e, int x, int y) {		if (!norun) {			return true;		}		mouse = true;		Graphics g = getGraphics();		for (i=0;i<=71;i++) {			points[i][1] = 200;		}		for (dx = 46;dx>=0;dx = dx - 2) {			dy = (int)(20*(90-dx)/45);			a = 0;			b = 135-(4*dx);			c = 45-(4*dx);			for (i=(-4*dy);i<=(3*dy);i+=dy) {				points[a][0] = i;			    points[a][1] = 40*Math.cos(b/180*Math.PI);			    points[a][2] = 40*Math.sin(b/180*Math.PI);				a++;				b += dx;				points[a][0] = i;			    points[a][1] = 40*Math.cos(c/180*Math.PI);			    points[a][2] = 40*Math.sin(c/180*Math.PI);				a++;				c += dx;			}			a = 0;			b = 135+(dx/2)-(4*dx);			c = 45+(dx/2)-(4*dx);			for (i=(int)(-3.5*dy);i<=(int)(3.5*dy);i+=dy) {				points[a+24][0] = i;			    points[a+24][1] = 40*Math.cos(b/180*Math.PI);			    points[a+24][2] = 40*Math.sin(b/180*Math.PI);				a++;				b += dx;				points[a+24][0] = i;			    points[a+24][1] = 40*Math.cos(c/180*Math.PI);			    points[a+24][2] = 40*Math.sin(c/180*Math.PI);				a++;				c += dx;			}			for (i=0;i<=15;i=i+2) {				points[i+48][0] = points[i][0] + ((points[i+1][0]-points[i][0])/3);				points[i+48][1] = points[i][1] + ((points[i+1][1]-points[i][1])/3);				points[i+48][2] = points[i][2] + ((points[i+1][2]-points[i][2])/3);				points[i+49][0] = points[i][0] + (2*(points[i+1][0]-points[i][0])/3);				points[i+49][1] = points[i][1] + (2*(points[i+1][1]-points[i][1])/3);				points[i+49][2] = points[i][2] + (2*(points[i+1][2]-points[i][2])/3);			}			if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {				buffer = createImage(size().width, size().height);			}			g = buffer.getGraphics();			update(g);			g = getGraphics();			g.drawImage(buffer,0,0,this);			g.dispose();		}		for (dx=0;dx<=7;dx++) {			dy = conv(dx);			points[dx+16][0] = points[dy][0];			points[dx+16][1] = points[dy][1]+140;			points[dx+16][2] = points[dy][2]+1;			points[dx+40][0] = points[dy+24][0];			points[dx+40][1] = points[dy+24][1]+140;			points[dx+40][2] = points[dy+24][2]+1;			points[dx+64][0] = points[dy+48][0];			points[dx+64][1] = points[dy+48][1]+140;			points[dx+64][2] = points[dy+48][2]+1;					}		for (dx=0;dx<40;dx++) {			for (i=0;i<=15;i++) {				if ((i<=5) || (i==7) || (i==9)) {					points[i][0] -= 2;					points[i+24][0] -= 2;					points[i+48][0] -= 2;				} else {					points[i][0] += 2;					points[i+24][0] += 2;					points[i+48][0] += 2;				}			}			if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {				buffer = createImage(size().width, size().height);			}			g = buffer.getGraphics();			update(g);			g = getGraphics();			g.drawImage(buffer,0,0,this);			g.dispose();		}		for (dx=0;dx<=69;dx++) {			for (i=16;i<=23;i++) {				points[i][1] -= 2;				points[i+24][1] -= 2;				points[i+48][1] -= 2;			}			if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {				buffer = createImage(size().width, size().height);			}			g = buffer.getGraphics();			update(g);			g = getGraphics();			g.drawImage(buffer,0,0,this);			g.dispose();		}		for (i=16;i<=23;i++) {			points[i][2] -= 1;			points[i+24][2] -= 1;			points[i+48][2] -= 1;		}		if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {			buffer = createImage(size().width, size().height);		}		g = buffer.getGraphics();		update(g);		g = getGraphics();		g.drawImage(buffer,0,0,this);		g.dispose();		for (dx = 0;dx<=46;dx+=2) {			dy = (int)(20*(90-dx)/45);			a = 0;			b = 135-(6*dx);			c = 45-(6*dx);			for (i=(-6*dy);i<=(5*dy);i+=dy) {				f = conv2(a);				points[f][0] = i;			    points[f][1] = 40*Math.cos(b/180*Math.PI);			    points[f][2] = 40*Math.sin(b/180*Math.PI);				a++;				f = conv2(a);				b += dx;				points[f][0] = i;			    points[f][1] = 40*Math.cos(c/180*Math.PI);			    points[f][2] = 40*Math.sin(c/180*Math.PI);				a++;				c += dx;			}			a = 0;			b = 135+(dx/2)-(6*dx);			c = 45+(dx/2)-(6*dx);			for (i=(int)(-5.5*dy);i<=(int)(5.5*dy);i+=dy) {				f = conv2(a+24);				points[f][0] = i;			    points[f][1] = 40*Math.cos(b/180*Math.PI);			    points[f][2] = 40*Math.sin(b/180*Math.PI);				a++;				f = conv2(a+24);				b += dx;				points[f][0] = i;			    points[f][1] = 40*Math.cos(c/180*Math.PI);			    points[f][2] = 40*Math.sin(c/180*Math.PI);				a++;				c += dx;			}			for (i=0;i<=23;i=i+2) {				f = conv2(i+48);				j = conv2(i+49);				p = conv2(i);				h = conv2(i+1);				points[f][0] = points[p][0] + ((points[h][0]-points[p][0])/3);				points[f][1] = points[p][1] + ((points[h][1]-points[p][1])/3);				points[f][2] = points[p][2] + ((points[h][2]-points[p][2])/3);				points[j][0] = points[p][0] + (2*(points[h][0]-points[p][0])/3);				points[j][1] = points[p][1] + (2*(points[h][1]-points[p][1])/3);				points[j][2] = points[p][2] + (2*(points[h][2]-points[p][2])/3);			}			if ((buffer==null) || (curw!=size().width) || (curh!=size().height)) {				buffer = createImage(size().width, size().height);			}			g = buffer.getGraphics();			update(g);			g = getGraphics();			g.drawImage(buffer,0,0,this);			g.dispose();		}		norun = false;		return true;	}		int conv(int x) {		switch (x) {			case 0:				a = 2;				break;			case 1:				a = 4;				break;			case 2:				a = 6;				break;			case 3:				a = 7;				break;			case 4:				a = 8;				break;			case 5:				a = 9;				break;			case 6:				a = 11;				break;			case 7:				a = 13;				break;		}		return a;	}		int conv2(int x) {		t = 0;		if (x>47) {			x = x - 48;			t = 48;		}		if (x>23) {			x = x - 24;			t = 24;		}		switch (x) {			case 0:				r = 0;				break;			case 1:				r = 1;				break;			case 2:				r = 2;				break;			case 3:				r = 3;				break;			case 4:				r = 4;				break;			case 5:				r = 5;				break;			case 6:				r = 16;				break;			case 7:				r = 7;				break;			case 8:				r = 17;				break;			case 9:				r = 9;				break;			case 10:				r = 18;				break;			case 11:				r = 19;				break;			case 12:				r = 20;				break;			case 13:				r = 21;				break;			case 14:				r = 6;				break;			case 15:				r = 22;				break;			case 16:				r = 8;				break;			case 17:				r = 23;				break;			case 18:				r = 10;				break;			case 19:				r = 11;				break;			case 20:				r = 12;				break;			case 21:				r = 13;				break;			case 22:				r = 14;				break;			case 23:				r = 15;				break;		}		r = r+t;		return r;	}}